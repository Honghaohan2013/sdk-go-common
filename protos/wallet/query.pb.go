// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wallet/query.proto

package wallet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type AssetsGrowth struct {
	// query datetime
	Datetime string `protobuf:"bytes,1,opt,name=datetime" json:"datetime,omitempty"`
	// growth amount
	GrowthAmount int64 `protobuf:"varint,2,opt,name=growth_amount,json=growthAmount" json:"growth_amount,omitempty"`
}

func (m *AssetsGrowth) Reset()                    { *m = AssetsGrowth{} }
func (m *AssetsGrowth) String() string            { return proto.CompactTextString(m) }
func (*AssetsGrowth) ProtoMessage()               {}
func (*AssetsGrowth) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{0} }

func (m *AssetsGrowth) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

func (m *AssetsGrowth) GetGrowthAmount() int64 {
	if m != nil {
		return m.GrowthAmount
	}
	return 0
}

type UsersGrowth struct {
	// query datetime
	Datetime string `protobuf:"bytes,1,opt,name=datetime" json:"datetime,omitempty"`
	// query growth_amount
	GrowthAmount int64 `protobuf:"varint,2,opt,name=growth_amount,json=growthAmount" json:"growth_amount,omitempty"`
}

func (m *UsersGrowth) Reset()                    { *m = UsersGrowth{} }
func (m *UsersGrowth) String() string            { return proto.CompactTextString(m) }
func (*UsersGrowth) ProtoMessage()               {}
func (*UsersGrowth) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{1} }

func (m *UsersGrowth) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

func (m *UsersGrowth) GetGrowthAmount() int64 {
	if m != nil {
		return m.GrowthAmount
	}
	return 0
}

type DAppAxtConsume struct {
	// query datetime
	Datetime string `protobuf:"bytes,1,opt,name=datetime" json:"datetime,omitempty"`
	// query consume_amount
	ConsumeAmount int64 `protobuf:"varint,2,opt,name=consume_amount,json=consumeAmount" json:"consume_amount,omitempty"`
}

func (m *DAppAxtConsume) Reset()                    { *m = DAppAxtConsume{} }
func (m *DAppAxtConsume) String() string            { return proto.CompactTextString(m) }
func (*DAppAxtConsume) ProtoMessage()               {}
func (*DAppAxtConsume) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{2} }

func (m *DAppAxtConsume) GetDatetime() string {
	if m != nil {
		return m.Datetime
	}
	return ""
}

func (m *DAppAxtConsume) GetConsumeAmount() int64 {
	if m != nil {
		return m.ConsumeAmount
	}
	return 0
}

type DAppAxtTotal struct {
	// query assign_amount
	AssignAmount int64 `protobuf:"varint,1,opt,name=assign_amount,json=assignAmount" json:"assign_amount,omitempty"`
	// query remain_amount
	RemainAmount int64 `protobuf:"varint,2,opt,name=remain_amount,json=remainAmount" json:"remain_amount,omitempty"`
}

func (m *DAppAxtTotal) Reset()                    { *m = DAppAxtTotal{} }
func (m *DAppAxtTotal) String() string            { return proto.CompactTextString(m) }
func (*DAppAxtTotal) ProtoMessage()               {}
func (*DAppAxtTotal) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{3} }

func (m *DAppAxtTotal) GetAssignAmount() int64 {
	if m != nil {
		return m.AssignAmount
	}
	return 0
}

func (m *DAppAxtTotal) GetRemainAmount() int64 {
	if m != nil {
		return m.RemainAmount
	}
	return 0
}

type DAppIssuedToken struct {
	// query issued_amount
	IssuedAmount int64 `protobuf:"varint,1,opt,name=issued_amount,json=issuedAmount" json:"issued_amount,omitempty"`
	// query remain_amount
	RemainAmount int64 `protobuf:"varint,2,opt,name=remain_amount,json=remainAmount" json:"remain_amount,omitempty"`
}

func (m *DAppIssuedToken) Reset()                    { *m = DAppIssuedToken{} }
func (m *DAppIssuedToken) String() string            { return proto.CompactTextString(m) }
func (*DAppIssuedToken) ProtoMessage()               {}
func (*DAppIssuedToken) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{4} }

func (m *DAppIssuedToken) GetIssuedAmount() int64 {
	if m != nil {
		return m.IssuedAmount
	}
	return 0
}

func (m *DAppIssuedToken) GetRemainAmount() int64 {
	if m != nil {
		return m.RemainAmount
	}
	return 0
}

type DAppIssuedTokens struct {
	// query dap
	DAppIssuedTokens map[string]*DAppIssuedToken `protobuf:"bytes,1,rep,name=dAppIssuedTokens" json:"dAppIssuedTokens,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *DAppIssuedTokens) Reset()                    { *m = DAppIssuedTokens{} }
func (m *DAppIssuedTokens) String() string            { return proto.CompactTextString(m) }
func (*DAppIssuedTokens) ProtoMessage()               {}
func (*DAppIssuedTokens) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{5} }

func (m *DAppIssuedTokens) GetDAppIssuedTokens() map[string]*DAppIssuedToken {
	if m != nil {
		return m.DAppIssuedTokens
	}
	return nil
}

type DAppList struct {
	// query name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// query description
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	// query logo
	Logo string `protobuf:"bytes,3,opt,name=logo" json:"logo,omitempty"`
}

func (m *DAppList) Reset()                    { *m = DAppList{} }
func (m *DAppList) String() string            { return proto.CompactTextString(m) }
func (*DAppList) ProtoMessage()               {}
func (*DAppList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{6} }

func (m *DAppList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DAppList) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *DAppList) GetLogo() string {
	if m != nil {
		return m.Logo
	}
	return ""
}

type DAppNum struct {
	// query num
	Num int64 `protobuf:"varint,1,opt,name=num" json:"num,omitempty"`
}

func (m *DAppNum) Reset()                    { *m = DAppNum{} }
func (m *DAppNum) String() string            { return proto.CompactTextString(m) }
func (*DAppNum) ProtoMessage()               {}
func (*DAppNum) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{7} }

func (m *DAppNum) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type DAppTotal struct {
	// query total_assets
	TotalAssets int64 `protobuf:"varint,1,opt,name=total_assets,json=totalAssets" json:"total_assets,omitempty"`
	// query total_tokens
	TotalTokens int64 `protobuf:"varint,2,opt,name=total_tokens,json=totalTokens" json:"total_tokens,omitempty"`
	// query total_txs
	TotalTxs int64 `protobuf:"varint,3,opt,name=total_txs,json=totalTxs" json:"total_txs,omitempty"`
	// query total_income_txs
	TotalIncomeTxs int64 `protobuf:"varint,4,opt,name=total_income_txs,json=totalIncomeTxs" json:"total_income_txs,omitempty"`
	// query total_spending_txs
	TotalSpendingTxs int64 `protobuf:"varint,5,opt,name=total_spending_txs,json=totalSpendingTxs" json:"total_spending_txs,omitempty"`
	// query total_axt_consumed_txs
	TotalAxtConsumedTxs int64 `protobuf:"varint,6,opt,name=total_axt_consumed_txs,json=totalAxtConsumedTxs" json:"total_axt_consumed_txs,omitempty"`
	// query total_income_assets
	TotalIncomeAssets int64 `protobuf:"varint,7,opt,name=total_income_assets,json=totalIncomeAssets" json:"total_income_assets,omitempty"`
	// query total_spending_assets
	TotalSpendingAssets int64 `protobuf:"varint,8,opt,name=total_spending_assets,json=totalSpendingAssets" json:"total_spending_assets,omitempty"`
	// query total_income_tokens
	TotalIncomeTokens int64 `protobuf:"varint,9,opt,name=total_income_tokens,json=totalIncomeTokens" json:"total_income_tokens,omitempty"`
	// query total_spending_tokens
	TotalSpendingTokens int64 `protobuf:"varint,10,opt,name=total_spending_tokens,json=totalSpendingTokens" json:"total_spending_tokens,omitempty"`
}

func (m *DAppTotal) Reset()                    { *m = DAppTotal{} }
func (m *DAppTotal) String() string            { return proto.CompactTextString(m) }
func (*DAppTotal) ProtoMessage()               {}
func (*DAppTotal) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{8} }

func (m *DAppTotal) GetTotalAssets() int64 {
	if m != nil {
		return m.TotalAssets
	}
	return 0
}

func (m *DAppTotal) GetTotalTokens() int64 {
	if m != nil {
		return m.TotalTokens
	}
	return 0
}

func (m *DAppTotal) GetTotalTxs() int64 {
	if m != nil {
		return m.TotalTxs
	}
	return 0
}

func (m *DAppTotal) GetTotalIncomeTxs() int64 {
	if m != nil {
		return m.TotalIncomeTxs
	}
	return 0
}

func (m *DAppTotal) GetTotalSpendingTxs() int64 {
	if m != nil {
		return m.TotalSpendingTxs
	}
	return 0
}

func (m *DAppTotal) GetTotalAxtConsumedTxs() int64 {
	if m != nil {
		return m.TotalAxtConsumedTxs
	}
	return 0
}

func (m *DAppTotal) GetTotalIncomeAssets() int64 {
	if m != nil {
		return m.TotalIncomeAssets
	}
	return 0
}

func (m *DAppTotal) GetTotalSpendingAssets() int64 {
	if m != nil {
		return m.TotalSpendingAssets
	}
	return 0
}

func (m *DAppTotal) GetTotalIncomeTokens() int64 {
	if m != nil {
		return m.TotalIncomeTokens
	}
	return 0
}

func (m *DAppTotal) GetTotalSpendingTokens() int64 {
	if m != nil {
		return m.TotalSpendingTokens
	}
	return 0
}

type DAppUsersList struct {
	// query id
	Id int64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	// query name
	Name string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	// query email
	Email string `protobuf:"bytes,3,opt,name=email" json:"email,omitempty"`
	// query phone
	Phone string `protobuf:"bytes,4,opt,name=phone" json:"phone,omitempty"`
}

func (m *DAppUsersList) Reset()                    { *m = DAppUsersList{} }
func (m *DAppUsersList) String() string            { return proto.CompactTextString(m) }
func (*DAppUsersList) ProtoMessage()               {}
func (*DAppUsersList) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{9} }

func (m *DAppUsersList) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DAppUsersList) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DAppUsersList) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *DAppUsersList) GetPhone() string {
	if m != nil {
		return m.Phone
	}
	return ""
}

type DAppUsersTotal struct {
	// query total_users
	TotalUsers int64 `protobuf:"varint,1,opt,name=total_users,json=totalUsers" json:"total_users,omitempty"`
}

func (m *DAppUsersTotal) Reset()                    { *m = DAppUsersTotal{} }
func (m *DAppUsersTotal) String() string            { return proto.CompactTextString(m) }
func (*DAppUsersTotal) ProtoMessage()               {}
func (*DAppUsersTotal) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{10} }

func (m *DAppUsersTotal) GetTotalUsers() int64 {
	if m != nil {
		return m.TotalUsers
	}
	return 0
}

type HotAssets struct {
	// query asset_id
	AssetId string `protobuf:"bytes,1,opt,name=asset_id,json=assetId" json:"asset_id,omitempty"`
	// query txs_num
	TxsNum int64 `protobuf:"varint,2,opt,name=txs_num,json=txsNum" json:"txs_num,omitempty"`
}

func (m *HotAssets) Reset()                    { *m = HotAssets{} }
func (m *HotAssets) String() string            { return proto.CompactTextString(m) }
func (*HotAssets) ProtoMessage()               {}
func (*HotAssets) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{11} }

func (m *HotAssets) GetAssetId() string {
	if m != nil {
		return m.AssetId
	}
	return ""
}

func (m *HotAssets) GetTxsNum() int64 {
	if m != nil {
		return m.TxsNum
	}
	return 0
}

type HotTokens struct {
	// query token_id
	TokenId string `protobuf:"bytes,1,opt,name=token_id,json=tokenId" json:"token_id,omitempty"`
	// query txs_num
	TxsNum int64 `protobuf:"varint,2,opt,name=txs_num,json=txsNum" json:"txs_num,omitempty"`
}

func (m *HotTokens) Reset()                    { *m = HotTokens{} }
func (m *HotTokens) String() string            { return proto.CompactTextString(m) }
func (*HotTokens) ProtoMessage()               {}
func (*HotTokens) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{12} }

func (m *HotTokens) GetTokenId() string {
	if m != nil {
		return m.TokenId
	}
	return ""
}

func (m *HotTokens) GetTxsNum() int64 {
	if m != nil {
		return m.TxsNum
	}
	return 0
}

type TopAssetUsers struct {
	// query user_id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// query assets_num
	AssetsNum int64 `protobuf:"varint,2,opt,name=assets_num,json=assetsNum" json:"assets_num,omitempty"`
}

func (m *TopAssetUsers) Reset()                    { *m = TopAssetUsers{} }
func (m *TopAssetUsers) String() string            { return proto.CompactTextString(m) }
func (*TopAssetUsers) ProtoMessage()               {}
func (*TopAssetUsers) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{13} }

func (m *TopAssetUsers) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TopAssetUsers) GetAssetsNum() int64 {
	if m != nil {
		return m.AssetsNum
	}
	return 0
}

type TopTokenUsers struct {
	// query user_id
	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	// query tokens_num
	TokensNum int64 `protobuf:"varint,2,opt,name=tokens_num,json=tokensNum" json:"tokens_num,omitempty"`
}

func (m *TopTokenUsers) Reset()                    { *m = TopTokenUsers{} }
func (m *TopTokenUsers) String() string            { return proto.CompactTextString(m) }
func (*TopTokenUsers) ProtoMessage()               {}
func (*TopTokenUsers) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{14} }

func (m *TopTokenUsers) GetUserId() string {
	if m != nil {
		return m.UserId
	}
	return ""
}

func (m *TopTokenUsers) GetTokensNum() int64 {
	if m != nil {
		return m.TokensNum
	}
	return 0
}

type Total struct {
	// query id
	TotalDapps int64 `protobuf:"varint,1,opt,name=total_dapps,json=totalDapps" json:"total_dapps,omitempty"`
	// query total_users
	TotalUsers int64 `protobuf:"varint,2,opt,name=total_users,json=totalUsers" json:"total_users,omitempty"`
	// query total_assets
	TotalAssets int64 `protobuf:"varint,3,opt,name=total_assets,json=totalAssets" json:"total_assets,omitempty"`
	// query total_tokens
	TotalTokens int64 `protobuf:"varint,4,opt,name=total_tokens,json=totalTokens" json:"total_tokens,omitempty"`
}

func (m *Total) Reset()                    { *m = Total{} }
func (m *Total) String() string            { return proto.CompactTextString(m) }
func (*Total) ProtoMessage()               {}
func (*Total) Descriptor() ([]byte, []int) { return fileDescriptor4, []int{15} }

func (m *Total) GetTotalDapps() int64 {
	if m != nil {
		return m.TotalDapps
	}
	return 0
}

func (m *Total) GetTotalUsers() int64 {
	if m != nil {
		return m.TotalUsers
	}
	return 0
}

func (m *Total) GetTotalAssets() int64 {
	if m != nil {
		return m.TotalAssets
	}
	return 0
}

func (m *Total) GetTotalTokens() int64 {
	if m != nil {
		return m.TotalTokens
	}
	return 0
}

func init() {
	proto.RegisterType((*AssetsGrowth)(nil), "wallet.AssetsGrowth")
	proto.RegisterType((*UsersGrowth)(nil), "wallet.UsersGrowth")
	proto.RegisterType((*DAppAxtConsume)(nil), "wallet.DAppAxtConsume")
	proto.RegisterType((*DAppAxtTotal)(nil), "wallet.DAppAxtTotal")
	proto.RegisterType((*DAppIssuedToken)(nil), "wallet.DAppIssuedToken")
	proto.RegisterType((*DAppIssuedTokens)(nil), "wallet.DAppIssuedTokens")
	proto.RegisterType((*DAppList)(nil), "wallet.DAppList")
	proto.RegisterType((*DAppNum)(nil), "wallet.DAppNum")
	proto.RegisterType((*DAppTotal)(nil), "wallet.DAppTotal")
	proto.RegisterType((*DAppUsersList)(nil), "wallet.DAppUsersList")
	proto.RegisterType((*DAppUsersTotal)(nil), "wallet.DAppUsersTotal")
	proto.RegisterType((*HotAssets)(nil), "wallet.HotAssets")
	proto.RegisterType((*HotTokens)(nil), "wallet.HotTokens")
	proto.RegisterType((*TopAssetUsers)(nil), "wallet.TopAssetUsers")
	proto.RegisterType((*TopTokenUsers)(nil), "wallet.TopTokenUsers")
	proto.RegisterType((*Total)(nil), "wallet.Total")
}

func init() { proto.RegisterFile("wallet/query.proto", fileDescriptor4) }

var fileDescriptor4 = []byte{
	// 740 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x55, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x95, 0x93, 0xe6, 0xc3, 0x93, 0x0f, 0x82, 0x4b, 0x69, 0xda, 0x0a, 0x11, 0x8c, 0x90, 0x72,
	0xa0, 0x89, 0xda, 0x5e, 0x10, 0x17, 0x14, 0x28, 0x2a, 0x91, 0x50, 0x91, 0xdc, 0x20, 0xa1, 0x82,
	0x14, 0xb9, 0xf1, 0x2a, 0xb1, 0x1a, 0xef, 0x1a, 0xef, 0x9a, 0xa6, 0xbf, 0x82, 0x1f, 0xc5, 0x95,
	0x1f, 0x85, 0x76, 0x66, 0x9b, 0xba, 0x4e, 0x69, 0x85, 0xc4, 0x6d, 0xe7, 0xed, 0x9b, 0x37, 0x2f,
	0x33, 0xb3, 0x0e, 0x38, 0x17, 0xfe, 0x7c, 0xce, 0x54, 0xff, 0x7b, 0xca, 0x92, 0xcb, 0x5e, 0x9c,
	0x08, 0x25, 0x9c, 0x32, 0x61, 0xee, 0x27, 0xa8, 0x0f, 0xa4, 0x64, 0x4a, 0x1e, 0x25, 0xe2, 0x42,
	0xcd, 0x9c, 0x6d, 0xa8, 0x06, 0xbe, 0x62, 0x2a, 0x8c, 0x58, 0xdb, 0xea, 0x58, 0x5d, 0xdb, 0x5b,
	0xc6, 0xce, 0x73, 0x68, 0x4c, 0x91, 0x35, 0xf6, 0x23, 0x91, 0x72, 0xd5, 0x2e, 0x74, 0xac, 0x6e,
	0xd1, 0xab, 0x13, 0x38, 0x40, 0xcc, 0x3d, 0x86, 0xda, 0x67, 0xc9, 0x92, 0xff, 0xa6, 0x77, 0x02,
	0xcd, 0xc3, 0x41, 0x1c, 0x0f, 0x16, 0xea, 0x9d, 0xe0, 0x32, 0x8d, 0xd8, 0x9d, 0x92, 0x2f, 0xa0,
	0x39, 0x21, 0xda, 0x4d, 0xcd, 0x86, 0x41, 0x8d, 0xe8, 0x17, 0xa8, 0x1b, 0xd1, 0x91, 0x50, 0xfe,
	0x5c, 0x3b, 0xf1, 0xa5, 0x0c, 0xa7, 0xfc, 0x2a, 0xcb, 0x22, 0x27, 0x04, 0x52, 0x92, 0x26, 0x25,
	0x2c, 0xf2, 0x43, 0x9e, 0xb3, 0x4b, 0xa0, 0x51, 0xfe, 0x0a, 0x0f, 0xb4, 0xf2, 0x50, 0xca, 0x94,
	0x05, 0x23, 0x71, 0xce, 0xb8, 0xce, 0x0b, 0x31, 0xcc, 0x89, 0x13, 0xf8, 0x2f, 0xe2, 0xbf, 0x2d,
	0x68, 0xe5, 0xd4, 0xa5, 0x73, 0x0a, 0xad, 0x20, 0x87, 0xb5, 0xad, 0x4e, 0xb1, 0x5b, 0xdb, 0xef,
	0xf5, 0x68, 0xc8, 0xbd, 0x7c, 0xce, 0x0a, 0xf0, 0x9e, 0xab, 0xe4, 0xd2, 0x5b, 0xd1, 0xd9, 0xfe,
	0x06, 0x1b, 0xb7, 0x52, 0x9d, 0x16, 0x14, 0xcf, 0xd9, 0xa5, 0x69, 0xbf, 0x3e, 0x3a, 0xbb, 0x50,
	0xfa, 0xe1, 0xcf, 0x53, 0x86, 0xc6, 0x6b, 0xfb, 0x9b, 0x7f, 0xa9, 0xed, 0x11, 0xeb, 0x75, 0xe1,
	0x95, 0xe5, 0x8e, 0xa0, 0xaa, 0x6f, 0x3f, 0x86, 0x52, 0x39, 0x0e, 0xac, 0x71, 0x7f, 0x39, 0x50,
	0x3c, 0x3b, 0x1d, 0xa8, 0x05, 0x4c, 0x4e, 0x92, 0x30, 0x56, 0xa1, 0xe0, 0x28, 0x6c, 0x7b, 0x59,
	0x48, 0x67, 0xcd, 0xc5, 0x54, 0xb4, 0x8b, 0x94, 0xa5, 0xcf, 0xee, 0x0e, 0x54, 0xb4, 0xea, 0x71,
	0x1a, 0x69, 0x97, 0x3c, 0x8d, 0x4c, 0xbf, 0xf5, 0xd1, 0xfd, 0x55, 0x04, 0x5b, 0xdf, 0xd2, 0xd8,
	0x9f, 0x41, 0x5d, 0xe9, 0xc3, 0xd8, 0xc7, 0x27, 0x60, 0x88, 0x35, 0xc4, 0xe8, 0x55, 0x5c, 0x53,
	0x14, 0x75, 0xb6, 0x90, 0xa1, 0x98, 0x01, 0xec, 0x80, 0x6d, 0x28, 0x0b, 0x89, 0x4e, 0x8a, 0x5e,
	0x95, 0xee, 0x17, 0xd2, 0xe9, 0x42, 0x8b, 0x2e, 0x43, 0x3e, 0x11, 0x11, 0x43, 0xce, 0x1a, 0x72,
	0x9a, 0x88, 0x0f, 0x11, 0xd6, 0xcc, 0x97, 0xe0, 0x10, 0x53, 0xc6, 0x8c, 0x07, 0x21, 0x9f, 0x22,
	0xb7, 0x84, 0x5c, 0xd2, 0x38, 0x31, 0x17, 0x9a, 0x7d, 0x00, 0x8f, 0x8d, 0xf5, 0x85, 0x1a, 0x9b,
	0xe5, 0x0e, 0x30, 0xa3, 0x8c, 0x19, 0xeb, 0xf4, 0x23, 0x96, 0xaf, 0x26, 0xd0, 0x49, 0x3d, 0x58,
	0xbf, 0x61, 0xc6, 0xfc, 0xec, 0x0a, 0x66, 0x3c, 0xcc, 0xf8, 0x31, 0x3f, 0x7e, 0x1f, 0x36, 0x72,
	0x96, 0x4c, 0x46, 0x35, 0x53, 0xe3, 0xca, 0x95, 0xc9, 0xc9, 0xd7, 0x30, 0x7d, 0xb3, 0x57, 0x6a,
	0x98, 0xee, 0xad, 0xd6, 0x30, 0x19, 0x70, 0x4b, 0x0d, 0xca, 0x71, 0xc7, 0xd0, 0xd0, 0x43, 0xc4,
	0xef, 0x0c, 0x6e, 0x4f, 0x13, 0x0a, 0x61, 0x60, 0xc6, 0x57, 0x08, 0x83, 0xe5, 0x36, 0x15, 0x32,
	0xdb, 0xf4, 0x08, 0x4a, 0xfa, 0x2d, 0xcd, 0xcd, 0xb2, 0x50, 0xa0, 0xd1, 0x78, 0x26, 0x38, 0xc3,
	0xa1, 0xd8, 0x1e, 0x05, 0xee, 0x1e, 0x7d, 0x74, 0xb0, 0x00, 0xad, 0xca, 0x53, 0xa0, 0x99, 0x8f,
	0x53, 0x8d, 0x99, 0x52, 0x80, 0x10, 0xb2, 0xdc, 0x37, 0x60, 0x7f, 0x10, 0xca, 0x34, 0x61, 0x0b,
	0xaa, 0xd8, 0xa9, 0xb1, 0x71, 0x65, 0x7b, 0x15, 0x8c, 0x87, 0x81, 0xb3, 0x09, 0x15, 0xb5, 0x90,
	0x63, 0xbd, 0x97, 0xb4, 0x4b, 0x65, 0xb5, 0x90, 0xc7, 0x69, 0x64, 0x04, 0x4c, 0x57, 0xb6, 0xa0,
	0x8a, 0x6d, 0xc8, 0x08, 0x60, 0x7c, 0x97, 0xc0, 0x11, 0x34, 0x46, 0x22, 0x46, 0x07, 0x68, 0x49,
	0x33, 0xb5, 0xdb, 0x6b, 0x8d, 0xb2, 0x0e, 0x87, 0x81, 0xf3, 0x04, 0x80, 0x06, 0x99, 0x51, 0xb1,
	0x09, 0xb9, 0x16, 0x42, 0x27, 0xf7, 0x0b, 0xd1, 0xb4, 0xb2, 0x42, 0x84, 0x68, 0xa1, 0x9f, 0x16,
	0x94, 0x72, 0xed, 0x0b, 0xfc, 0x38, 0xbe, 0xd9, 0xbe, 0x43, 0x8d, 0xe4, 0xfb, 0x5b, 0xc8, 0xf7,
	0x77, 0xe5, 0xad, 0x16, 0xef, 0x7f, 0xab, 0x6b, 0x2b, 0x6f, 0xf5, 0xed, 0xc1, 0xe9, 0xde, 0x34,
	0x54, 0xb3, 0xf4, 0xac, 0x37, 0x11, 0x51, 0xdf, 0x4f, 0x16, 0x3e, 0x9f, 0xcc, 0xfc, 0x90, 0xf7,
	0x65, 0x70, 0xbe, 0x3b, 0x15, 0xbb, 0x13, 0x11, 0x45, 0x82, 0xf7, 0xf1, 0x3f, 0x52, 0xf6, 0xe9,
	0x13, 0x76, 0x56, 0xc6, 0xf0, 0xe0, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc5, 0x54, 0x7d, 0x19,
	0x48, 0x07, 0x00, 0x00,
}
