// Code generated by protoc-gen-go. DO NOT EDIT.
// source: wallet/didentity.proto

package wallet

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// DidType decentralized identity types
// Decentralized Identity
// ├── Asset: 资产类型
//    └── SerialNumber: 序列号资产类型
// └── Entity: 账户类型
//    ├── DApp: DAPP账户类型
//    ├── ChainApp: 应用链账户类型
//    ├── Organization: 组织账户类型
//    └── Person: 个人账户类型
//        ├── Dependent: 非独立个人账户类型
//        └── Independent: 独立个人账户类型
type DidType int32

const (
	DidType_ASSET        DidType = 0
	DidType_ENTITY       DidType = 1
	DidType_ORGANIZATION DidType = 2
	DidType_PERSON       DidType = 3
	DidType_INDEPENDENT  DidType = 4
	DidType_DEPENDENT    DidType = 5
	DidType_SERIALNUMBER DidType = 6
	DidType_SWCASH       DidType = 11
	DidType_SWFEE        DidType = 12
	DidType_SWLOAN       DidType = 13
	DidType_SWINTEREST   DidType = 14
	DidType_DAPP         DidType = 21
	DidType_CHAINAPP     DidType = 22
)

var DidType_name = map[int32]string{
	0:  "ASSET",
	1:  "ENTITY",
	2:  "ORGANIZATION",
	3:  "PERSON",
	4:  "INDEPENDENT",
	5:  "DEPENDENT",
	6:  "SERIALNUMBER",
	11: "SWCASH",
	12: "SWFEE",
	13: "SWLOAN",
	14: "SWINTEREST",
	21: "DAPP",
	22: "CHAINAPP",
}
var DidType_value = map[string]int32{
	"ASSET":        0,
	"ENTITY":       1,
	"ORGANIZATION": 2,
	"PERSON":       3,
	"INDEPENDENT":  4,
	"DEPENDENT":    5,
	"SERIALNUMBER": 6,
	"SWCASH":       11,
	"SWFEE":        12,
	"SWLOAN":       13,
	"SWINTEREST":   14,
	"DAPP":         21,
	"CHAINAPP":     22,
}

func (x DidType) String() string {
	return proto.EnumName(DidType_name, int32(x))
}
func (DidType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// DidControlType defines the control type of decentralized identity controllers
// or, and, m of n
type DidControlType int32

const (
	DidControlType_OR   DidControlType = 0
	DidControlType_AND  DidControlType = 1
	DidControlType_MOFN DidControlType = 2
)

var DidControlType_name = map[int32]string{
	0: "OR",
	1: "AND",
	2: "MOFN",
}
var DidControlType_value = map[string]int32{
	"OR":   0,
	"AND":  1,
	"MOFN": 2,
}

func (x DidControlType) String() string {
	return proto.EnumName(DidControlType_name, int32(x))
}
func (DidControlType) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

// DidOwner defines owner information of decentralized identity
type DidOwner struct {
	Id        string                     `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type      []string                   `protobuf:"bytes,2,rep,name=type" json:"type,omitempty"`
	Expires   *google_protobuf.Timestamp `protobuf:"bytes,3,opt,name=expires" json:"expires,omitempty"`
	PublicKey *PublicKey                 `protobuf:"bytes,4,opt,name=publicKey" json:"publicKey,omitempty"`
}

func (m *DidOwner) Reset()                    { *m = DidOwner{} }
func (m *DidOwner) String() string            { return proto.CompactTextString(m) }
func (*DidOwner) ProtoMessage()               {}
func (*DidOwner) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *DidOwner) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DidOwner) GetType() []string {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DidOwner) GetExpires() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

func (m *DidOwner) GetPublicKey() *PublicKey {
	if m != nil {
		return m.PublicKey
	}
	return nil
}

// DidControl defines controllers information of decentralized identity
type DidControl struct {
	Type              DidControlType `protobuf:"varint,1,opt,name=type,enum=wallet.DidControlType" json:"type,omitempty"`
	MinimumSignatures int32          `protobuf:"varint,2,opt,name=minimumSignatures" json:"minimumSignatures,omitempty"`
	Signers           []string       `protobuf:"bytes,3,rep,name=signers" json:"signers,omitempty"`
}

func (m *DidControl) Reset()                    { *m = DidControl{} }
func (m *DidControl) String() string            { return proto.CompactTextString(m) }
func (*DidControl) ProtoMessage()               {}
func (*DidControl) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *DidControl) GetType() DidControlType {
	if m != nil {
		return m.Type
	}
	return DidControlType_OR
}

func (m *DidControl) GetMinimumSignatures() int32 {
	if m != nil {
		return m.MinimumSignatures
	}
	return 0
}

func (m *DidControl) GetSigners() []string {
	if m != nil {
		return m.Signers
	}
	return nil
}

// OffchainMetadata defines offchain metadata of decentralized identity
type OffchainMetadata struct {
	Filename    string `protobuf:"bytes,1,opt,name=filename" json:"filename,omitempty"`
	Endpoint    string `protobuf:"bytes,2,opt,name=endpoint" json:"endpoint,omitempty"`
	StorageType string `protobuf:"bytes,3,opt,name=storageType" json:"storageType,omitempty"`
	ContentHash string `protobuf:"bytes,4,opt,name=contentHash" json:"contentHash,omitempty"`
	Size        int32  `protobuf:"varint,5,opt,name=size" json:"size,omitempty"`
	ReadOnly    bool   `protobuf:"varint,6,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *OffchainMetadata) Reset()                    { *m = OffchainMetadata{} }
func (m *OffchainMetadata) String() string            { return proto.CompactTextString(m) }
func (*OffchainMetadata) ProtoMessage()               {}
func (*OffchainMetadata) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *OffchainMetadata) GetFilename() string {
	if m != nil {
		return m.Filename
	}
	return ""
}

func (m *OffchainMetadata) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *OffchainMetadata) GetStorageType() string {
	if m != nil {
		return m.StorageType
	}
	return ""
}

func (m *OffchainMetadata) GetContentHash() string {
	if m != nil {
		return m.ContentHash
	}
	return ""
}

func (m *OffchainMetadata) GetSize() int32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *OffchainMetadata) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// DDO defines an object to describe the decentralized identity
type DDO struct {
	Context          string                           `protobuf:"bytes,1,opt,name=context" json:"context,omitempty"`
	Id               string                           `protobuf:"bytes,2,opt,name=id" json:"id,omitempty"`
	Type             []DidType                        `protobuf:"varint,3,rep,packed,name=type,enum=wallet.DidType" json:"type,omitempty"`
	Owners           []*DidOwner                      `protobuf:"bytes,4,rep,name=owners" json:"owners,omitempty"`
	Guardian         string                           `protobuf:"bytes,5,opt,name=guardian" json:"guardian,omitempty"`
	Controls         []*DidControl                    `protobuf:"bytes,6,rep,name=controls" json:"controls,omitempty"`
	Claims           map[string]*VerifiableClaimBrief `protobuf:"bytes,7,rep,name=claims" json:"claims,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Services         map[string]string                `protobuf:"bytes,8,rep,name=services" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Endpoint         string                           `protobuf:"bytes,9,opt,name=endpoint" json:"endpoint,omitempty"`
	Metadata         *Metadata                        `protobuf:"bytes,10,opt,name=metadata" json:"metadata,omitempty"`
	Created          *google_protobuf.Timestamp       `protobuf:"bytes,11,opt,name=created" json:"created,omitempty"`
	Updated          *google_protobuf.Timestamp       `protobuf:"bytes,12,opt,name=updated" json:"updated,omitempty"`
	Expires          *google_protobuf.Timestamp       `protobuf:"bytes,13,opt,name=expires" json:"expires,omitempty"`
	Signatures       []*Signature                     `protobuf:"bytes,14,rep,name=signatures" json:"signatures,omitempty"`
	Status           Status                           `protobuf:"varint,15,opt,name=status,enum=wallet.Status" json:"status,omitempty"`
	Name             string                           `protobuf:"bytes,16,opt,name=name" json:"name,omitempty"`
	ParentId         string                           `protobuf:"bytes,17,opt,name=parentId" json:"parentId,omitempty"`
	OffchainMetadata *OffchainMetadata                `protobuf:"bytes,18,opt,name=offchainMetadata" json:"offchainMetadata,omitempty"`
}

func (m *DDO) Reset()                    { *m = DDO{} }
func (m *DDO) String() string            { return proto.CompactTextString(m) }
func (*DDO) ProtoMessage()               {}
func (*DDO) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *DDO) GetContext() string {
	if m != nil {
		return m.Context
	}
	return ""
}

func (m *DDO) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *DDO) GetType() []DidType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *DDO) GetOwners() []*DidOwner {
	if m != nil {
		return m.Owners
	}
	return nil
}

func (m *DDO) GetGuardian() string {
	if m != nil {
		return m.Guardian
	}
	return ""
}

func (m *DDO) GetControls() []*DidControl {
	if m != nil {
		return m.Controls
	}
	return nil
}

func (m *DDO) GetClaims() map[string]*VerifiableClaimBrief {
	if m != nil {
		return m.Claims
	}
	return nil
}

func (m *DDO) GetServices() map[string]string {
	if m != nil {
		return m.Services
	}
	return nil
}

func (m *DDO) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *DDO) GetMetadata() *Metadata {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *DDO) GetCreated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Created
	}
	return nil
}

func (m *DDO) GetUpdated() *google_protobuf.Timestamp {
	if m != nil {
		return m.Updated
	}
	return nil
}

func (m *DDO) GetExpires() *google_protobuf.Timestamp {
	if m != nil {
		return m.Expires
	}
	return nil
}

func (m *DDO) GetSignatures() []*Signature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

func (m *DDO) GetStatus() Status {
	if m != nil {
		return m.Status
	}
	return Status_INVALID
}

func (m *DDO) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *DDO) GetParentId() string {
	if m != nil {
		return m.ParentId
	}
	return ""
}

func (m *DDO) GetOffchainMetadata() *OffchainMetadata {
	if m != nil {
		return m.OffchainMetadata
	}
	return nil
}

func init() {
	proto.RegisterType((*DidOwner)(nil), "wallet.DidOwner")
	proto.RegisterType((*DidControl)(nil), "wallet.DidControl")
	proto.RegisterType((*OffchainMetadata)(nil), "wallet.OffchainMetadata")
	proto.RegisterType((*DDO)(nil), "wallet.DDO")
	proto.RegisterEnum("wallet.DidType", DidType_name, DidType_value)
	proto.RegisterEnum("wallet.DidControlType", DidControlType_name, DidControlType_value)
}

func init() { proto.RegisterFile("wallet/didentity.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 916 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x55, 0x5d, 0x6f, 0xe3, 0x44,
	0x17, 0x5e, 0x27, 0x69, 0x12, 0x9f, 0xb4, 0xe9, 0x74, 0xde, 0x97, 0x62, 0x22, 0x10, 0x51, 0x91,
	0x50, 0x54, 0x76, 0x13, 0x6d, 0x16, 0x24, 0x04, 0x57, 0x69, 0xed, 0xa5, 0x11, 0x5b, 0xbb, 0x1a,
	0x07, 0x2a, 0xf6, 0x06, 0x4d, 0xe3, 0x49, 0x3a, 0xaa, 0xbf, 0x64, 0x4f, 0xda, 0x86, 0x2b, 0x6e,
	0xf8, 0x09, 0xfc, 0x1a, 0x24, 0x7e, 0x1b, 0x9a, 0xf1, 0xd8, 0x75, 0x5b, 0xa4, 0xe5, 0x6e, 0xce,
	0x39, 0xcf, 0x33, 0x73, 0xbe, 0x1e, 0x1b, 0x0e, 0xef, 0x68, 0x18, 0x32, 0x31, 0x09, 0x78, 0xc0,
	0x62, 0xc1, 0xc5, 0x76, 0x9c, 0x66, 0x89, 0x48, 0x70, 0xbb, 0xf0, 0x0f, 0x3e, 0x5f, 0x27, 0xc9,
	0x3a, 0x64, 0x13, 0xe5, 0xbd, 0xda, 0xac, 0x26, 0x82, 0x47, 0x2c, 0x17, 0x34, 0x4a, 0x0b, 0xe0,
	0xe0, 0x7f, 0xfa, 0x82, 0x65, 0x12, 0x45, 0x49, 0xac, 0x9d, 0x48, 0x3b, 0xd3, 0x1b, 0xae, 0x3d,
	0x9f, 0x69, 0xcf, 0x2d, 0xcb, 0xf8, 0x8a, 0xd3, 0xab, 0x90, 0xfd, 0xba, 0x0c, 0x29, 0x8f, 0x8a,
	0xf0, 0xd1, 0x9f, 0x06, 0x74, 0x6d, 0x1e, 0x78, 0x77, 0x31, 0xcb, 0x70, 0x1f, 0x1a, 0x3c, 0xb0,
	0x8c, 0xa1, 0x31, 0x32, 0x49, 0x83, 0x07, 0x18, 0x43, 0x4b, 0x6c, 0x53, 0x66, 0x35, 0x86, 0xcd,
	0x91, 0x49, 0xd4, 0x19, 0x7f, 0x0d, 0x1d, 0x76, 0x9f, 0xf2, 0x8c, 0xe5, 0x56, 0x73, 0x68, 0x8c,
	0x7a, 0xd3, 0xc1, 0xb8, 0xc8, 0x74, 0x5c, 0x66, 0x3a, 0x5e, 0x94, 0x99, 0x92, 0x12, 0x8a, 0x27,
	0x60, 0xa6, 0x9b, 0xab, 0x90, 0x2f, 0x7f, 0x64, 0x5b, 0xab, 0xa5, 0x78, 0x07, 0xe3, 0x22, 0xb3,
	0xf1, 0x45, 0x19, 0x20, 0x0f, 0x98, 0xa3, 0xdf, 0x0d, 0x00, 0x9b, 0x07, 0xa7, 0x49, 0x2c, 0xb2,
	0x24, 0xc4, 0xc7, 0x3a, 0x13, 0x99, 0x5b, 0x7f, 0x7a, 0x58, 0x52, 0x1f, 0x10, 0x8b, 0x6d, 0xca,
	0x74, 0x86, 0x2f, 0xe1, 0x20, 0xe2, 0x31, 0x8f, 0x36, 0x91, 0xcf, 0xd7, 0x31, 0x15, 0x1b, 0x99,
	0x6b, 0x63, 0x68, 0x8c, 0x76, 0xc8, 0xf3, 0x00, 0xb6, 0xa0, 0x93, 0xf3, 0x75, 0xcc, 0x32, 0x59,
	0x8f, 0x2c, 0xb3, 0x34, 0x8f, 0xfe, 0x36, 0x00, 0x79, 0xab, 0xd5, 0xf2, 0x9a, 0xf2, 0xf8, 0x9c,
	0x09, 0x1a, 0x50, 0x41, 0xf1, 0x00, 0xba, 0x2b, 0x1e, 0xb2, 0x98, 0x46, 0x4c, 0x37, 0xaa, 0xb2,
	0x65, 0x8c, 0xc5, 0x41, 0x9a, 0xf0, 0x58, 0xa8, 0xf7, 0x4c, 0x52, 0xd9, 0x78, 0x08, 0xbd, 0x5c,
	0x24, 0x19, 0x5d, 0x33, 0x99, 0xa9, 0x6a, 0x9d, 0x49, 0xea, 0x2e, 0x89, 0x58, 0x26, 0xb1, 0x60,
	0xb1, 0x38, 0xa3, 0xf9, 0xb5, 0x6a, 0x92, 0x49, 0xea, 0x2e, 0x39, 0x8e, 0x9c, 0xff, 0xc6, 0xac,
	0x1d, 0x55, 0x8b, 0x3a, 0xcb, 0x37, 0x33, 0x46, 0x03, 0x2f, 0x0e, 0xb7, 0x56, 0x7b, 0x68, 0x8c,
	0xba, 0xa4, 0xb2, 0x8f, 0xfe, 0xe8, 0x40, 0xd3, 0xb6, 0x3d, 0x59, 0xa2, 0xba, 0xe6, 0x5e, 0xe8,
	0x94, 0x4b, 0x53, 0x0f, 0xbc, 0x51, 0x0d, 0xfc, 0x0b, 0xdd, 0x66, 0xd9, 0x89, 0xfe, 0x74, 0xbf,
	0xd6, 0xe6, 0x5a, 0x7f, 0x47, 0xd0, 0x4e, 0xee, 0x54, 0xc3, 0x5a, 0xc3, 0xe6, 0xa8, 0x37, 0x45,
	0x35, 0x98, 0xda, 0x23, 0xa2, 0xe3, 0x32, 0xb9, 0xf5, 0x86, 0x66, 0x01, 0xa7, 0xb1, 0x4a, 0xda,
	0x24, 0x95, 0x8d, 0xc7, 0xd0, 0x5d, 0x16, 0xa3, 0xcb, 0xad, 0xb6, 0xba, 0x07, 0x3f, 0x9f, 0x2a,
	0xa9, 0x30, 0x78, 0x02, 0x6d, 0xb5, 0xb7, 0xb9, 0xd5, 0x51, 0xe8, 0x8f, 0x2b, 0xb4, 0xed, 0x8d,
	0x4f, 0x55, 0xc4, 0x89, 0x45, 0xb6, 0x25, 0x1a, 0x86, 0xbf, 0x81, 0x6e, 0xce, 0xb2, 0x5b, 0xbe,
	0x64, 0xb9, 0xd5, 0x55, 0x94, 0x4f, 0xea, 0x14, 0x5f, 0xc7, 0x0a, 0x52, 0x05, 0x7d, 0x34, 0x44,
	0xf3, 0xc9, 0x10, 0x5f, 0x42, 0x37, 0xd2, 0x8b, 0x60, 0x81, 0x5a, 0xe2, 0xaa, 0xf6, 0x72, 0x41,
	0x48, 0x85, 0x90, 0x4a, 0x59, 0x66, 0x8c, 0x0a, 0x16, 0x58, 0xbd, 0x0f, 0x2b, 0x45, 0x43, 0x25,
	0x6b, 0x93, 0x06, 0x8a, 0xb5, 0xfb, 0x61, 0x96, 0x86, 0xd6, 0x55, 0xb9, 0xf7, 0xdf, 0x55, 0xf9,
	0x1a, 0x20, 0x7f, 0x90, 0x48, 0x5f, 0x35, 0xa9, 0x92, 0x65, 0xa5, 0x11, 0x52, 0x03, 0xe1, 0x2f,
	0xa1, 0x9d, 0x0b, 0x2a, 0x36, 0xb9, 0xb5, 0xaf, 0xa4, 0xd8, 0xaf, 0xe0, 0xca, 0x4b, 0x74, 0x54,
	0xee, 0xaa, 0xd2, 0x08, 0x52, 0x2d, 0x6c, 0x95, 0xfa, 0x48, 0x69, 0xc6, 0x62, 0x31, 0x0f, 0xac,
	0x83, 0xa2, 0xb5, 0xa5, 0x8d, 0x6d, 0x40, 0xc9, 0x13, 0xad, 0x59, 0x58, 0x55, 0x62, 0x95, 0x2f,
	0x3c, 0xd5, 0x22, 0x79, 0xc6, 0x18, 0x5c, 0x42, 0xaf, 0xb6, 0x0a, 0x18, 0x41, 0xf3, 0x86, 0x6d,
	0xf5, 0xd2, 0xcb, 0x23, 0x9e, 0xc2, 0xce, 0x2d, 0x0d, 0x37, 0x4c, 0xed, 0x7c, 0x6f, 0xfa, 0x69,
	0x79, 0xf7, 0xcf, 0xd5, 0xd7, 0x51, 0xf1, 0x4f, 0x32, 0xce, 0x56, 0xa4, 0x80, 0x7e, 0xd7, 0xf8,
	0xd6, 0x18, 0x7c, 0x0f, 0x7b, 0x8f, 0x16, 0xe6, 0x5f, 0xae, 0xfe, 0x7f, 0xfd, 0x6a, 0xb3, 0x46,
	0x3e, 0xfe, 0xcb, 0x80, 0x8e, 0x96, 0x10, 0x36, 0x61, 0x67, 0xe6, 0xfb, 0xce, 0x02, 0xbd, 0xc0,
	0x00, 0x6d, 0xc7, 0x5d, 0xcc, 0x17, 0xbf, 0x20, 0x03, 0x23, 0xd8, 0xf5, 0xc8, 0x0f, 0x33, 0x77,
	0xfe, 0x7e, 0xb6, 0x98, 0x7b, 0x2e, 0x6a, 0xc8, 0xe8, 0x85, 0x43, 0x7c, 0xcf, 0x45, 0x4d, 0xbc,
	0x0f, 0xbd, 0xb9, 0x6b, 0x3b, 0x17, 0x8e, 0x6b, 0x3b, 0xee, 0x02, 0xb5, 0xf0, 0x1e, 0x98, 0x0f,
	0xe6, 0x8e, 0x64, 0xfb, 0x0e, 0x99, 0xcf, 0xde, 0xb9, 0x3f, 0x9d, 0x9f, 0x38, 0x04, 0xb5, 0x25,
	0xdb, 0xbf, 0x3c, 0x9d, 0xf9, 0x67, 0xa8, 0x27, 0x9f, 0xf4, 0x2f, 0xdf, 0x3a, 0x0e, 0xda, 0x2d,
	0xdc, 0xef, 0xbc, 0x99, 0x8b, 0xf6, 0x70, 0x1f, 0xc0, 0xbf, 0x9c, 0xbb, 0x0b, 0x87, 0x38, 0xfe,
	0x02, 0xf5, 0x71, 0x17, 0x5a, 0xf6, 0xec, 0xe2, 0x02, 0x7d, 0x84, 0x77, 0xa1, 0x7b, 0x7a, 0x36,
	0x9b, 0xbb, 0xd2, 0x3a, 0x3c, 0xfe, 0x0a, 0xfa, 0x8f, 0x3f, 0xb3, 0xb8, 0x0d, 0x0d, 0x8f, 0xa0,
	0x17, 0xb8, 0x03, 0xcd, 0x99, 0x6b, 0x23, 0x43, 0x52, 0xcf, 0xbd, 0xb7, 0x2e, 0x6a, 0x9c, 0xbc,
	0x79, 0xff, 0x7a, 0xcd, 0xc5, 0xf5, 0xe6, 0x6a, 0xbc, 0x4c, 0xa2, 0x09, 0xcd, 0xee, 0x69, 0xac,
	0x26, 0x34, 0xc9, 0x83, 0x9b, 0x57, 0xeb, 0xe4, 0x55, 0xf1, 0xb3, 0x2a, 0x7e, 0x6a, 0xf9, 0xa4,
	0x68, 0xfe, 0x55, 0x5b, 0x99, 0x6f, 0xfe, 0x09, 0x00, 0x00, 0xff, 0xff, 0x26, 0x80, 0x65, 0xc3,
	0x13, 0x07, 0x00, 0x00,
}
